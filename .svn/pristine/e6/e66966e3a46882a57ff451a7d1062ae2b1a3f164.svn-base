package Genes;

import Genes.Cromossomo;
import com.mxgraph.model.mxCell;
import java.beans.XMLDecoder;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;
import view.Componente;

public class GerarTodosA2 {
    
    public static void main(String[] args){
        Calendar data = Calendar.getInstance();
        int hora = data.get(Calendar.HOUR_OF_DAY);
        int min = data.get(Calendar.MINUTE);
        int seg = data.get(Calendar.SECOND);
        String tempo1 = "" + hora + " : " + min + " : " + seg;
        
        Map<String, ArrayList<Componente>> dicComp = new HashMap<>();
        int period = 7000;
        double ec = 0.4;
        int de = 1;
        try {
            File arquivo = new File("componentesPadrao.txt");
            FileReader fr = new FileReader(arquivo);
            BufferedReader br = new BufferedReader(fr);
            br.readLine();
            Componente comp;
            dicComp.put("UPS_5kVA", new ArrayList<Componente>());
            dicComp.put("STS", new ArrayList<Componente>());
            dicComp.put("SDTransformer", new ArrayList<Componente>());
            dicComp.put("Subpanel", new ArrayList<Componente>());
            dicComp.put("PowerStrip", new ArrayList<Componente>());
            while (br.ready()) {
                String lincomp = br.readLine();
                String atb[] = new String[5];
                atb = lincomp.split(";");
                comp = new Componente();
                comp.setId(Integer.parseInt(atb[0]));
                comp.setTipoComp(atb[2]);
                comp.setMttf(Double.parseDouble(atb[3]));
                comp.setEficiencia(Double.parseDouble(atb[4]));
                comp.setPreco(Double.parseDouble(atb[5]));

                dicComp.get(atb[2]).add(comp);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        try {
            FileWriter arq = new FileWriter("combinacoesA2.txt");
            PrintWriter gravarArq = new PrintWriter(arq);

            gravarArq.printf("ups - sdt - subp - ps - ups2 - score");

            ArrayList<Componente> genes;
            Cromossomo atual;
            String dado;
            double maior = 0;
            String otimo = "";
            for (Componente ups : dicComp.get("UPS_5kVA")) {
                ups.setIdVert("3");
                for (Componente sdt : dicComp.get("SDTransformer")) {
                    sdt.setIdVert("4");
                    for (Componente subp : dicComp.get("Subpanel")) {
                        subp.setIdVert("5");
                        for (Componente ps : dicComp.get("PowerStrip")) {
                            ps.setIdVert("7");
                            for (Componente ups2 : dicComp.get("UPS_5kVA")) {
                                try{
                                    ups2 = ups2.clone();
                                }catch(Exception ex){
                                    ex.printStackTrace();
                                }
                                ups2.setIdVert("10");
                                
                                for (Componente sts : dicComp.get("STS")) {
                                    sts.setIdVert("11");
                                    genes = new ArrayList<>();
                                    genes.add(ups);
                                    genes.add(sdt);
                                    genes.add(subp);
                                    genes.add(ps);
                                    genes.add(ups2);
                                    genes.add(sts);

                                    atual = new Cromossomo(genes, period, ec, de);
                                    atual.setScore("a2.mry");

                                    dado = "\n" + ups.getId() + " - " + sdt.getId() + " - " + subp.getId() + " - " + ps.getId() + " - " + ups2.getId() + " - " + atual.getScore();
                                    //gravarArq.printf(dado);

                                    if (atual.getScore() > maior) {
                                        maior = atual.getScore();
                                        otimo = dado;
                                    }
                                }
                                
                            }

                        }
                    }
                }
            }
            gravarArq.printf("\n\nOtimo\n" + otimo);
            gravarArq.printf("\nnum9s   " + (-Math.log10(1-maior)));
            System.out.println("A2 num9s    " + (-Math.log10(1-maior)));

            arq.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        //ArrayList<Cromossomo> todos = new ArrayList<>();
        data = Calendar.getInstance();
        hora = data.get(Calendar.HOUR_OF_DAY);
        min = data.get(Calendar.MINUTE);
        seg = data.get(Calendar.SECOND);
        String tempo2 = "" + hora + " : " + min + " : " + seg;
        System.out.println("tempo1 " + tempo1 + "\ntempo2 " + tempo2);
    }
}
